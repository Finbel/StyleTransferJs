{"version":3,"sources":["componenets/WhatsInThisImage.js","componenets/ComputerVision.js","componenets/VectorGraph.js","componenets/Nlp.js","App.js","serviceWorker.js","index.js"],"names":["WhatsInThisImage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","imageRef","React","createRef","state","prediction","className","probability","isLoading","error","predict","bind","assertThisInitialized","current","setState","s","objectSpread","console","log","ml5","classifier","results","length","Error","_context","t0","renderImage","prevProps","react_default","a","createElement","react_spinners","sizeUnit","size","color","loading","JSON","stringify","message","ref","Component","ComputerVision","catpath","window","location","hostname","componenets_WhatsInThisImage","_ref","alt","crossOrigin","src","id","width","VectorGraph","network","onSelect","nodes","links","forEach","link","source","target","react_vis_force","selectedNode","undefined","showLabels","simulationOptions","zoom","alpha","radiusMargin","onSelectNode","event","node","map","key","radius","fill","interpolateSpectral","explored","Nlp","_useState","useState","_useState2","slicedToArray","word","setWord","_useState3","_useState4","wordVectors","setWordVectors","_useState5","_useState6","setNetwork","useEffect","nearest","then","b","newNetwork","selectedWord","neighbours","scaleNumber","find","newNodes","toConsumableArray","newLinks","item","i","includes","push","neighbourLink","value","some","buildNetwork","react","componenets_VectorGraph","App","BrowserRouter","Link","to","Route","exact","path","render","Redirect","component","Boolean","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.721a7f28.chunk.js","sourcesContent":["import React from \"react\";\nimport { ClipLoader } from \"react-spinners\";\nimport * as ml5 from \"ml5\";\n\nclass WhatsInThisImage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.imageRef = React.createRef();\n    this.state = {\n      prediction: {\n        className: \"\",\n        probability: \"\"\n      },\n      isLoading: false,\n      error: null\n    };\n    this.predict = this.predict.bind(this);\n  }\n  async predict() {\n    if (!this.imageRef.current) return;\n    this.setState(s => ({ ...s, isLoading: true }));\n    console.log(\"HIII\");\n    // hack for slow connections\n    // await delay(2000)\n    console.log(\"Hiyein\");\n    try {\n      const classifier = await ml5.imageClassifier(\"MobileNet\");\n      const results = await classifier.predict(this.imageRef.current);\n      console.log(\"Hiyein 3\");\n      if (results.length === 0) {\n        this.setState({ error: new Error(\"NO_PREDICTIONS\"), isLoading: false });\n        return;\n      } else {\n        this.setState({\n          isLoading: false,\n          prediction: {\n            className: results[0].className,\n            probability: results[0].probability\n          }\n        });\n      }\n    } catch (error) {\n      console.log(\"Hiyein 4\");\n      this.setState({ error, isLoading: false });\n    }\n  }\n  async componentDidMount() {\n    if (this.props.renderImage) {\n      await this.predict();\n    }\n  }\n  async componentDidUpdate(prevProps) {\n    if (prevProps.renderImage !== this.props.renderImage) {\n      await this.predict();\n    }\n  }\n  render() {\n    return (\n      <div>\n        <div>\n          The MobileNet model labeled this as{\" \"}\n          <pre>{this.state.prediction.className}</pre>\n          with a confidence of <pre>{this.state.prediction.probability}</pre>\n        </div>\n\n        <ClipLoader\n          sizeUnit={\"px\"}\n          size={150}\n          color={\"#123abc\"}\n          loading={this.state.isLoading}\n        />\n\n        <pre>\n          error : {JSON.stringify(this.state.error, null, 2)}{\" \"}\n          {this.state.error !== null && this.state.error.message}\n        </pre>\n        {this.props.renderImage !== null &&\n          this.props.renderImage({ ref: this.imageRef })}\n      </div>\n    );\n  }\n}\n\nexport default WhatsInThisImage;\n","import React, { Component } from \"react\";\nimport WhatsInThisImage from \"./WhatsInThisImage\";\n\nclass ComputerVision extends Component {\n  render() {\n    const catpath =\n      window.location.hostname === \"localhost\" ? \"/cat.jpeg\" : \"/cat.jpeg\";\n\n    return (\n      <WhatsInThisImage\n        renderImage={({ ref }) => (\n          <img\n            alt=\"cat\"\n            ref={ref}\n            crossOrigin=\"anonymous\"\n            src={catpath}\n            id=\"image\"\n            width=\"400\"\n          />\n        )}\n      />\n    );\n  }\n}\n\nexport default ComputerVision;\n","import React from \"react\";\nimport {\n  InteractiveForceGraph,\n  ForceGraphNode,\n  ForceGraphLink\n} from \"react-vis-force\";\nimport { interpolateSpectral } from \"d3-scale-chromatic\";\n\nconst VectorGraph = props => {\n  const { network, onSelect } = props;\n  const { nodes, links } = network;\n\n  links.forEach(link => console.log(link.source + link.target));\n\n  return (\n    <div className=\"graph\">\n      <InteractiveForceGraph\n        selectedNode={undefined}\n        showLabels={true}\n        simulationOptions={{\n          zoom: true,\n          alpha: 1,\n          radiusMargin: 30\n        }}\n        onSelectNode={(event, node) => onSelect(node.id)}\n      >\n        {nodes.map(node => (\n          <ForceGraphNode\n            key={node.id}\n            node={{\n              id: node.id,\n              radius: 7\n            }}\n            fill={interpolateSpectral(\n              nodes.length ? node.color / (nodes.length - 1) : 0\n            )}\n            className={node.explored ? \"explored\" : null}\n          />\n        ))}\n        {links.map(link => (\n          <ForceGraphLink key={link.key} link={link} />\n        ))}\n      </InteractiveForceGraph>\n    </div>\n  );\n};\n\nexport default VectorGraph;\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport { ClipLoader } from \"react-spinners\";\nimport VectorGraph from \"./VectorGraph\";\nimport * as ml5 from \"ml5\";\n\nconst linkEquality = (a, b) => {\n  return (\n    (a.source === b.source && a.target === b.target) ||\n    (a.source === b.target && a.target === b.source)\n  );\n};\n\nconst networkEquality = (a, b) => a.links.length === b.links.length;\n\nconst buildNetwork = (network, selectedWord, neighbours) => {\n  const { nodes, links } = network;\n  const scaleNumber = nodes.find(node => node.id === selectedWord).color;\n  nodes.forEach(node => {\n    if (node.id === selectedWord) {\n      node.explored = true;\n    }\n  });\n  const newNodes = [...nodes];\n  const newLinks = [...links];\n\n  neighbours.forEach((item, i) => {\n    if (!nodes.includes(item.word)) {\n      newNodes.push({\n        id: item.word,\n        color: scaleNumber + i + 1\n      });\n    }\n    const neighbourLink = {\n      source: selectedWord,\n      target: item.word,\n      value: 2\n    };\n    if (!links.some(link => linkEquality(link, neighbourLink))) {\n      newLinks.push(neighbourLink);\n    }\n  });\n\n  return {\n    nodes: newNodes,\n    links: newLinks\n  };\n};\n\nconst Nlp = () => {\n  const [word, setWord] = useState(\"rainbow\");\n  const [wordVectors, setWordVectors] = useState(undefined);\n  const [network, setNetwork] = useState({\n    nodes: [{ id: \"rainbow\", color: 0 }],\n    links: []\n  });\n\n  console.log(network);\n\n  useEffect(() => {\n    // Create a new word2vec method\n    const wordVectors = ml5.word2vec(\n      \"https://raw.githubusercontent.com/ml5js/ml5-examples/master/p5js/Word2Vec/data/wordvecs10000.json\",\n      () => setWordVectors(wordVectors)\n    );\n  }, []);\n\n  useEffect(() => {\n    wordVectors &&\n      wordVectors.nearest(word, 5).then(results => {\n        const newNetwork = buildNetwork(network, word, results);\n        if (!networkEquality(network, newNetwork)) {\n          setNetwork(newNetwork);\n        }\n      });\n  }, [network, word, wordVectors]);\n\n  return (\n    <Fragment>\n      <h2>Word model</h2>\n      <h3>Similar words to {word}</h3>\n\n      <ClipLoader\n        sizeUnit={\"px\"}\n        size={150}\n        color={\"#123abc\"}\n        loading={wordVectors === undefined}\n      />\n\n      {wordVectors && network.links !== 0 && (\n        <VectorGraph network={network} onSelect={setWord} />\n      )}\n    </Fragment>\n  );\n};\n\nexport default Nlp;\n","import React, { Component } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\nimport \"./App.css\";\nimport ComputerVision from \"./componenets/ComputerVision\";\nimport Nlp from \"./componenets/Nlp\";\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <div>\n            <div className=\"Header-Container\">\n              <div>\n                <Link to=\"/onlineml/\">Home</Link>\n              </div>\n              <div>\n                <Link to=\"/onlineml/cv\">Computer Vision</Link>\n              </div>\n              <div>\n                <Link to=\"/onlineml/nlp\">NLP</Link>\n              </div>\n            </div>\n\n            <h2>Ml models</h2>\n\n            <Route exact path=\"/\" render={() => <Redirect to=\"/onlineml\" />} />\n            <Route exact path=\"/onlineml/\" component={ComputerVision} />\n            <Route path=\"/onlineml/cv\" component={ComputerVision} />\n            <Route path=\"/onlineml/nlp\" component={Nlp} />\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}