{"version":3,"sources":["componenets/WhatsInThisImage.js","componenets/ComputerVision.js","componenets/Nlp.js","App.js","serviceWorker.js","index.js"],"names":["WhatsInThisImage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","imageRef","React","createRef","state","prediction","className","probability","isLoading","error","predict","bind","assertThisInitialized","current","setState","s","objectSpread","console","log","ml5","classifier","results","length","Error","_context","t0","renderImage","prevProps","react_default","a","createElement","react_spinners","sizeUnit","size","color","loading","JSON","stringify","message","ref","Component","ComputerVision","componenets_WhatsInThisImage","_ref","alt","crossOrigin","src","id","width","Nlp","_useState","useState","_useState2","slicedToArray","word","setWord","_useState3","undefined","_useState4","wordVectors","setWordVectors","_useState5","_useState6","neighbours","setNeighbours","useEffect","nearest","_","react","map","item","onClick","key","distance","App","BrowserRouter","Link","to","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8330bf0.chunk.js","sourcesContent":["import React from \"react\";\nimport { ClipLoader } from \"react-spinners\";\nimport * as ml5 from \"ml5\";\n\nclass WhatsInThisImage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.imageRef = React.createRef();\n    this.state = {\n      prediction: {\n        className: \"\",\n        probability: \"\"\n      },\n      isLoading: false,\n      error: null\n    };\n    this.predict = this.predict.bind(this);\n  }\n  async predict() {\n    if (!this.imageRef.current) return;\n    this.setState(s => ({ ...s, isLoading: true }));\n    console.log(\"HIII\");\n    // hack for slow connections\n    // await delay(2000)\n    console.log(\"Hiyein\");\n    try {\n      const classifier = await ml5.imageClassifier(\"MobileNet\");\n      const results = await classifier.predict(this.imageRef.current);\n      console.log(\"Hiyein 3\");\n      if (results.length === 0) {\n        this.setState({ error: new Error(\"NO_PREDICTIONS\"), isLoading: false });\n        return;\n      } else {\n        this.setState({\n          isLoading: false,\n          prediction: {\n            className: results[0].className,\n            probability: results[0].probability\n          }\n        });\n      }\n    } catch (error) {\n      console.log(\"Hiyein 4\");\n      this.setState({ error, isLoading: false });\n    }\n  }\n  async componentDidMount() {\n    if (this.props.renderImage) {\n      await this.predict();\n    }\n  }\n  async componentDidUpdate(prevProps) {\n    if (prevProps.renderImage !== this.props.renderImage) {\n      await this.predict();\n    }\n  }\n  render() {\n    return (\n      <div>\n        <div>\n          The MobileNet model labeled this as{\" \"}\n          <pre>{this.state.prediction.className}</pre>\n          with a confidence of <pre>{this.state.prediction.probability}</pre>\n        </div>\n\n        <ClipLoader\n          sizeUnit={\"px\"}\n          size={150}\n          color={\"#123abc\"}\n          loading={this.state.isLoading}\n        />\n\n        <pre>\n          error : {JSON.stringify(this.state.error, null, 2)}{\" \"}\n          {this.state.error !== null && this.state.error.message}\n        </pre>\n        {this.props.renderImage !== null &&\n          this.props.renderImage({ ref: this.imageRef })}\n      </div>\n    );\n  }\n}\n\nexport default WhatsInThisImage;\n","import React, { Component } from \"react\";\nimport WhatsInThisImage from \"./WhatsInThisImage\";\n\nclass ComputerVision extends Component {\n  render() {\n    return (\n      <WhatsInThisImage\n        renderImage={({ ref }) => (\n          <img\n            alt=\"cat\"\n            ref={ref}\n            crossOrigin=\"anonymous\"\n            src=\"/cat.jpeg\"\n            id=\"image\"\n            width=\"400\"\n          />\n        )}\n      />\n    );\n  }\n}\n\nexport default ComputerVision;\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport { ClipLoader } from \"react-spinners\";\nimport {\n  InteractiveForceGraph,\n  ForceGraphNode,\n  ForceGraphLink\n} from \"react-vis-force\";\nimport * as ml5 from \"ml5\";\n\nconst Nlp = () => {\n  const [word, setWord] = useState(\"rainbow\");\n  const [wordVectors, setWordVectors] = useState(undefined);\n  const [neighbours, setNeighbours] = useState(undefined);\n\n  console.log(wordVectors);\n\n  useEffect(() => {\n    // Create a new word2vec method\n    const wordVectors = ml5.word2vec(\n      \"https://raw.githubusercontent.com/ml5js/ml5-examples/master/p5js/Word2Vec/data/wordvecs10000.json\",\n      () => setWordVectors(wordVectors)\n    );\n  }, []);\n\n  useEffect(() => {\n    wordVectors &&\n      wordVectors.nearest(word, (_, results) => {\n        setNeighbours(results);\n      });\n  }, [word, wordVectors]);\n\n  return (\n    <Fragment>\n      <h2>Word model</h2>\n      <h3>Similar words to {word}</h3>\n\n      <ClipLoader\n        sizeUnit={\"px\"}\n        size={150}\n        color={\"#123abc\"}\n        loading={wordVectors === undefined}\n      />\n\n      {wordVectors &&\n        neighbours &&\n        neighbours.map(item => (\n          <li\n            onClick={() => {\n              setWord(item.word);\n            }}\n            key={item.distance}\n          >\n            {item.word}\n          </li>\n        ))}\n    </Fragment>\n  );\n};\n\nexport default Nlp;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport ComputerVision from \"./componenets/ComputerVision\";\nimport Nlp from \"./componenets/Nlp\";\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <div>\n            <div className=\"Header-Container\">\n              <div>\n                <Link to=\"/\">Home</Link>\n              </div>\n              <div>\n                <Link to=\"/cv\">Computer Vision</Link>\n              </div>\n              <div>\n                <Link to=\"/nlp\">NLP</Link>\n              </div>\n            </div>\n\n            <h2>Ml models</h2>\n\n            <Route exact path=\"/\" component={ComputerVision} />\n            <Route path=\"/cv\" component={ComputerVision} />\n            <Route path=\"/nlp\" component={Nlp} />\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}